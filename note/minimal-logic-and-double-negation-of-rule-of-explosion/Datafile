@title
最小論理に爆発律の二重否定を加えた体系について

@header
最小論理に爆発律の二重否定を加えた体系について

@nav
..
.

@chapter
はしがき

　最小論理と直観主義論理について整理している過程ですこしおもしろいことに気づいた
ので、ここに記しておきます。

@right
(2021-05-07)

@chapter
最小論理と直観主義論理について

　基本的な論理体系についての知識は前提としますが、軽く触れておきます。
まず古典（命題）論理というものがあり、つぎのような公理型と推論規則からなる体系です。

@axiom-schema-and-inference-rule.tex
\renewcommand{\arraystretch}{3}
\begin{array}{cc}
\left(A\right)                      & p\vdash{}p                                                                                                    \\
\left(W\right)                      & \cfrac{\Gamma\vdash{}q}{p,\Gamma\vdash{}q}                                                                    \\
\left(C\right)                      & \cfrac{p,p,\Gamma\vdash{}q}{p,\Gamma\vdash{}q}                                                                \\
\left(P\right)                      & \cfrac{q,p,\Gamma\vdash{}r}{p,q,\Gamma\vdash{}r}                                                              \\
\left(\makebox{\rightarrow}I\right) & \cfrac{p,\Gamma\vdash{}q}{\Gamma\vdash{}p\rightarrow{}q}                                                      \\
\left(\makebox{\rightarrow}E\right) & \cfrac{\Gamma\vdash{}p\quad\Delta\vdash{}p\rightarrow{}q}{\Gamma,\Delta\vdash{}q}                             \\
\left(\makebox{\land}I\right)       & \cfrac{\Gamma\vdash{}p\quad\Delta\vdash{}q}{\Gamma,\Delta\vdash{}p\land{}q}                                   \\
\left(\makebox{\land}E_1^{}\right)  & \cfrac{\Gamma\vdash{}p\land{}q}{\Gamma\vdash{}p}                                                              \\
\left(\makebox{\land}E_2^{}\right)  & \cfrac{\Gamma\vdash{}p\land{}q}{\Gamma\vdash{}q}                                                              \\
\left(\makebox{\lor}I_1^{}\right)   & \cfrac{\Gamma\vdash{}p}{\Gamma\vdash{}p\lor{}q}                                                               \\
\left(\makebox{\lor}I_2^{}\right)   & \cfrac{\Gamma\vdash{}q}{\Gamma\vdash{}p\lor{}q}                                                               \\
\left(\makebox{\lor}E\right)        & \cfrac{\Gamma\vdash{}p\lor{}q\quad{}p,\Delta\vdash{}r\quad{}q,\Sigma\vdash{}r}{\Gamma,\Delta,\Sigma\vdash{}r} \\
\left(\bot\right)                   & \vdash\bot\rightarrow{}p                                                                                      \\
\left(LEM\right)                    & \vdash{}p\lor\lnot{}p                                                                                         \\
\end{array}

　このうち最後の (LEM) を排中律と言い、古典論理からこれを除いた体系を直観主義論理と言います。
また (⊥) を爆発律と言い、直観主義論理からこれを除いた体系を最小論理と言います。

　なおこの記事では命題論理にかぎった話をしますが、ひとくちに論理と言っても、
述語論理などさまざまなものがありますので注意してください。

　今回は最小論理に (⊥) の二重否定にあたるつぎのような命題を公理型として加えた体系に関する話をします。

@not-not-false-implies-p.tex
\vdash\lnot\lnot\left(\bot\rightarrow{}p\right)

@chapter
パースの法則について

　パースの法則とはつぎのかたちをした命題を言います。

@peirce.tex
\left(\left(p\rightarrow{}q\right)\rightarrow{}p\right)\rightarrow{}p

　これは直観主義論理では証明できない恒真式（※）として知られています。

　（※）命題変数に真偽のいずれをどんな組みあわせを代入しても全体として常に真となる
ような命題のこと。

　さて ¬p = p→⊥ ということに注意すると先ほどの爆発律の二重否定は

@false-implies-p-implies-false-implies-false.tex
\left(\left(\bot\rightarrow{}p\right)\rightarrow\bot\right)\rightarrow\bot

　となり、パースの法則の一部に ⊥ を代入したかたちをしています。
直観主義論理では二重否定の導入はできますからもちろんこれは証明できます。

　最小論理ではこれは（たぶん）証明できません（※）。
というのは最小論理では爆発律がないので、実際のところ、
⊥ というのは変数とあまりちがいがないからです。ゆえに最小論理では

@peirce.tex

　が証明できないのであれば

@false-implies-p-implies-false-implies-false.tex

　も証明できません。もちろんパースの法則は直観主義論理でも証明できませんし、
またそれより弱い体系である最小論理でも証明できません。そういうわけで
最小論理で爆発律の二重否定を証明することはできないわけです。

　（※）理屈から言って証明できないと考えることは自然だと思いますが、
きちんとした文献でそういった記述を読んだことはないのでやや自信なし。

@chapter
最小論理に爆発律の二重否定を加えるとなにがうれしいか？

　最小論理では爆発律の二重否定は証明できませんので、
最小論理に爆発律の二重否定を加えた体系は
最小論理より真に強い（※）体系と言えます。
また直観主義論理では二重否定の導入はできますので直観主義論理よりは弱く、
また二重否定の除去はできないため、直観主義論理より真に弱い体系です。

　（※）体系の強さを考えるときは「強い」「弱い」を「以上」「以下」、
「真に強い」「真に弱い」を「超」「未満」といった意味で使います。
この強さというのはふつう証明できる命題の集合の包含関係で考えます。

　また最小論理ではつぎのようにして二重否定の導入

@p-entails-not-not-p.tex
\left(\makebox{\rightarrow}I\right)\quad
\cfrac{
  \left(P\right)\quad
  \cfrac{
    \left(\makebox{\rightarrow}E\right)\quad
    \cfrac{
      p\vdash{}p
      \quad
      \lnot{}p\vdash\lnot{}p
    }{
      p,\lnot{}p\vdash\bot
    }
  }{
    \lnot{}p,p\vdash\bot
  }
}{
  p\vdash{}\lnot\lnot{}p
}

　と排中律の二重否定

@not-not-p-or-not-p.tex
\left(\makebox{\rightarrow}I\right)\quad
\cfrac{
  \left(C\right)\quad
  \cfrac{
    \left(\makebox{\rightarrow}E\right)\quad
    \cfrac{
      \left(\makebox{\rightarrow}I\right)\quad
      \cfrac{
        \left(\makebox{\rightarrow}E\right)\quad
        \cfrac{
          \left(\makebox{\lor}I_1^{}\right)\quad
          \cfrac{
            p\vdash{}p
          }{
            p\vdash{}p\lor\lnot{}p
          }
          \quad
          \begin{array}{c}\\\lnot\left(p\lor\lnot{}p\right)\vdash\lnot\left(p\lor\lnot{}p\right)\end{array}
        }{
          p,\lnot\left(p\lor\lnot{}p\right)\vdash\bot
        }
      }{
        \lnot\left(p\lor\lnot{}p\right)\vdash\lnot{}p
      }
      \quad
      \left(\makebox{\rightarrow}I\right)\quad
      \cfrac{
        \left(\makebox{\rightarrow}E\right)\quad
        \cfrac{
          \left(\makebox{\lor}I_2^{}\right)\quad
          \cfrac{
            \lnot{}p\vdash\lnot{}p
          }{
            \lnot{}p\vdash{}p\lor\lnot{}p
          }
          \quad
          \begin{array}{c}\\\lnot\left(p\lor\lnot{}p\right)\vdash\lnot\left(p\lor\lnot{}p\right)\end{array}
        }{
          \lnot{}p,\lnot\left(p\lor\lnot{}p\right)\vdash\bot
        }
      }{
        \lnot\left(p\lor\lnot{}p\right)\vdash\lnot\lnot{}p
      }
    }{
      \lnot\left(p\lor\lnot{}p\right),\lnot\left(p\lor\lnot{}p\right)\vdash\bot
    }
  }{
    \lnot\left(p\lor\lnot{}p\right)\vdash\bot
  }
}{
  \vdash\lnot\lnot\left(p\lor\lnot{}p\right)
}

　が証明できます。

　このように二重否定の導入があるので、最小論理で証明できる命題の二重否定は必ず最小論理で証明できます。
さらに排中律の二重否定は最小論理の範囲で証明可能ですから、
爆発律の二重否定を公理とすることにより ¬¬ をある種の『古典論理コンテキスト』だと思えば、
¬¬ のなかで古典論理の命題が証明できるようになるわけです。

　爆発律と排中律を仮定すれば古典論理の命題はすべて証明できますし、
それらを (→I) で (⊥→p)→(q∨¬q)→… といったかたちにすることは簡単です。
よって ¬¬ のなかで古典論理の命題が証明できることを示すには
¬¬p, ¬¬(p→q) から ¬¬q が結論できることを示せばじゅうぶんでしょう。
つぎがその証明図です。

@not-not-p-and-not-not-p-implies-q-entails-not-ont-q.tex
\left(\makebox{\rightarrow}I\right)\quad
\cfrac{
  \left(\makebox{\rightarrow}E\right)\quad
    \cfrac{
    \left(\makebox{\rightarrow}I\right)\quad
    \cfrac{
      \left(\makebox{\rightarrow}E\right)\quad
      \cfrac{
        \left(\makebox{\rightarrow}I\right)\quad
        \cfrac{
          \left(\makebox{\rightarrow}E\right)\quad
          \cfrac{
            \left(\makebox{\rightarrow}E\right)\quad
            \cfrac{
              p\vdash{}p
              \quad
              p\rightarrow{}q\vdash{}p\rightarrow{}q
            }{
              p,p\rightarrow{}q\vdash{}q
            }
            \quad
            \begin{array}{c}\\\lnot{}q\vdash\lnot{}q\end{array}
          }{
            p,p\rightarrow{}q,\lnot{}q\vdash{}\bot
          }
        }{
          p\rightarrow{}q,\lnot{}q\vdash{}\lnot{}p
        }
        \quad
        \begin{array}{c}\\\lnot\lnot{}p\vdash\lnot\lnot{}p\end{array}
      }{
        p\rightarrow{}q,\lnot{}q,\lnot\lnot{}p\vdash\bot
      }
    }{
      \lnot{}q,\lnot\lnot{}p\vdash{}\lnot\left(p\rightarrow{}q\right)
    }
    \quad
    \begin{array}{c}\\\lnot\lnot{}\left(p\rightarrow{}q\right)\vdash\lnot\lnot{}\left(p\rightarrow{}q\right)\end{array}
  }{
    \lnot{}q,\lnot\lnot{}p,\lnot\lnot\left(p\rightarrow{}q\right)\vdash\bot
  }
}{
  \lnot\lnot{}p,\lnot\lnot\left(p\rightarrow{}q\right)\vdash\lnot\lnot{}q
}

@chapter
型システムへの応用

　型システムとして考えるのであれば ¬¬(⊥→p) はある種の『エラーを投げる作用素』と
捉えることができます。 ¬¬ は Monad のようなコンテキストです。
¬¬ を M と表し ⊥ を Bottom と表せば

@code
raise :: M (Bottom -> a)

　となります。こういったものを Monad として実装する場合、ふつう

@code
raise' :: Bottom -> M a

　といった型つけになり、実際これはつぎのように実装可能です

@code
raise' b = do
  f <- raise
  return $ f b

　一方でその逆、つまり raise を raise' で実装することは (undefined や unsafePerformIO をつかわないかぎり) できません（※）。

　（※）Comonad のような『いつでも中身をとりだせる』具体的な構造では実装できる場合もあります。

@chapter
継続モナドと限定継続、 Effect System について

　M は実際（型のうえでは）継続モナドそのものでもあります。
しかし raise :: M (Bottom -> a) のような定義は Haskell の継続モナドでは（たぶん）困難です。
実際にこういった実装をするにはおそらく FFI を使うか、あるいは GHC のプリミティブを使うなどして
かなり黒魔術的なコードを書く必要があると思われます。

　この定義は広域脱出ができる変数のスコープを制限しつつ、
かつ (いわゆる純粋な関数と同じ signature で) 継続が使えるのでおもしろいと思います。
言語の設計によってはトップレベルの定義とそれ以外を区別することで、
M を明示しないスタイルでなおかつ（いわゆる）純粋な関数とそうでないものを区別するようなものも
考えられるかもしれません。

　最後にとりあげる話題は限定継続と Effect System のことです。
実際この定義は限定継続と似ているような感じもします。一方でそうではない感じもします。
限定継続や Effect System との関係を考えてみるのもおもしろいと思っています。
これらはまだあまり詰めて考えられていませんが、今後の話題としておもしろいかもしれません。
