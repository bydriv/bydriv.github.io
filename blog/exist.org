#+SETUPFILE: ../setup.org
#+TITLE: 存在型， および Rank2Types によるそれと等価な表現について

#+BEGIN_LOCATION
@@html:https://<a href="/">bydriv.github.io</a>/<a href="/blog">blog</a>/<strong>exist.html</strong>@@
#+END_LOCATION

#+BEGIN_CREATED_AT
created at @@html:<time datetime="2018-01-18">2018-01-18</time>@@
#+END_CREATED_AT

#+BEGIN_UPDATED_AT
updated at @@html:<time datetime="2018-01-19">2018-01-19</time>@@
#+END_UPDATED_AT

存在型について軽く記しておく． まず存在型とはなんぞやという話をしておくと，
~∃x.T~ のように 存在量化子 ~∃~ で表現された型である．
Haskell には ~ExistentialQuantification~ という言語拡張があるが，
理論的には ~Rank2Types~ があれば同等の表現が可能である．
~∃x.T~ は， ~∀y.(∀x.T→y)→y~ と等しい．
この事実は TaPL 24 章にも書かれているし，
記号論理の入門書にも書かれていたりする．

#+BEGIN_SRC sh :exports results :results html
pygmentize -l haskell -f html Exist.hs
#+END_SRC

と， これだけでは味気ないので， 存在型が理論的基礎となっているものについても触れておく．
たとえば SML の ~signature~ である． そこで， 上記のコードを SML に翻訳してみるとしよう．

#+BEGIN_SRC sh :exports results :results html
pygmentize -l sml -f html exist.sml
#+END_SRC

OCaml では ~module type~ と呼ばれる．
また， 存在型は簡易的な *抽象データ型* (/abstract data types/)を表現できる．
これは Stroustrup のいうところのオブジェクト指向ができる，
ということでもある．
