#+SETUPFILE: ../setup.org
#+TITLE: Hijack 開発ブログ: Rust 化計画

#+BEGIN_LOCATION
@@html:https://<a href="/">bydriv.github.io</a>/<a href="/blog">blog</a>/<strong>hijack-dev-rust.html</strong>@@
#+END_LOCATION

#+BEGIN_CREATED_AT
created at @@html:<time datetime="2018-12-09">2018-12-09</time>@@
#+END_CREATED_AT

#+BEGIN_UPDATED_AT
updated at @@html:<time datetime="2018-12-09">2018-12-09</time>@@
#+END_UPDATED_AT

[[./hijack-dev.org][Hijack 開発ブログ]] に書いたとおり，現在 [[../game/hijack/index.org][Hijack]] というゲームを開発している（ほんまか）．

これまでの経緯

- 最初はネイティヴで開発していたんだけど，
  たぶん開発したところでダウンロードして遊んでくれるひとってかなり少ないだろうなァということで，
  ブラウザで動くようにしようとなった．
- ブラウザで動かすにしても altJS を使うかどうかなどある．試したものは:
  - Haste
  - BuckleScript
  - Rust (WASM backend && wasm-bindgen)

など． 個人的には altJS としては(いまのところ) BuckleScript がよい塩梅なんじゃないかと思っているが，
仕事で Rust を書くことになったので，勉強も兼ねて Rust にすることにした．

* 技術的詳細

Hijack というゲーム特有の部分と汎用的な部分を分離して再利用できるようにする方針．
汎用的な部分は Brownfox と命名することにした．

- Brownfox: https://github.com/bydriv/bydriv.github.io/tree/master/game/hijack/brownfox
- Hijack: https://github.com/bydriv/bydriv.github.io/tree/master/game/hijack

** Brownfox

ムーアマシンベースのゲームエンジン (になる予定)．
ムーアマシンとは: https://en.wikipedia.org/wiki/Moore_machine

ムーアマシンの定義における遷移関数はゲームにおける 1フレームの処理，
出力関数は view (状態から実際に表示する画像などを出力する) に相当する．

~brownfox::Moore<I, O>~ は入力の型を ~I~ ，出力の型を ~O~ とするムーアマシン．

~I~ はたとえばゲームパッドの入力， ~O~ はたとえば画像になる．

たとえばつぎのように:

#+BEGIN_EXAMPLE
impl brownfox::Moore<(&Inputs, &Game), Views> for Teiri {
    fn transit(&self, (inputs, game): &(&Inputs, &Game)) -> Teiri {
        Teiri {
            frame_count: self.frame_count.transit(&()),
            x: self.x,
            y: self.y,
            pose: self.pose.clone(),
            direction: self.direction.clone(),
        }
    }

    fn output(&self) -> Views {
        Views {
            views: vec![View::Image(
                format!(
                    "pixelart/teiri/walk/front/{}.png",
                    self.frame_count.i / 8 % 4
                ),
                self.x,
                self.y,
            )],
        }
    }
}
#+END_EXAMPLE

~inputs~ はゲームパッド， ~game~ は1フレーム前のゲーム全体の状態
(これらはまだ使っていないが，ゆくゆくはプレイヤーが操作したり AI が行動を決定するために必要になる)．

なお Brownfox の設計自体は今日突然できたわけではなく，2年前から Hijack を Haskell で書いていたとき，
ゲームの状態を1ステップ進める処理が遷移関数に，
状態から view を得る処理が出力関数になることに気づいたことがきっかけである．

状態と入力から view を得るようにすればミーリマシンになるが， view を得るという処理にかぎっていえば，
ムーアマシンのように (入力をとらずに) 状態のみから view を得るほうがきれいなインターフェースになる．

なお， Brownfox 自体は ~I~ がゲームパッドだったり ~O~ が view だったりということは仮定せず，
ジェネリクスで多相に書く予定である．

* 今後の展望

Hijack を Rust で書く準備はできたのであとは書くだけなんだがそれが大変(当然)．

目的はふたつあり，

- Hijack 自体の開発 (自分で遊びたいから)
- Rust の勉強 (仕事で使うから)

両方達成できればよりよいが，最低でも片方は達成したい．
まあこういう楽しい題材でがりがり書いてればかなり勉強になるんじゃないかな (願望)．
