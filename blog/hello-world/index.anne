#h2 Anne でブログを書くことにした

なんか。
いろいろあって Anne というシリアライズフォーマット兼軽量マークアップ言語でブログを書くことにした。

今日はその話。

#h3 背景

もともとわたしはひとより自然言語の文章をよく書くタイプだと思う。
ひとより、というのは、一般的なプログラマに比べて。

そういうのもあり、文章を書くのは非常にたいへんだと理解している。
文章自体を書くのもたいへんだし、それを書くフォーマットに振りまわされるのもつらい。

ドキュメントやブログもそうなのだが、文章を書くという行為において
人間はふたつのものと戦わねばならない。
ひとつは英語や日本語のような自然言語。もうひとつは Word だとか LaTeX だとか、
自然言語を入力するソフトウェア。

当然のことだが、もし LaTeX を完璧に使いこなせたとしても、自然言語の部分を書く能力や労力は別途求められる。
その逆もまた然りで、自然言語で完璧に文章を書けたとしても、 LaTeX が使えるとはかぎらない。

このふたつはべつの行為であり、しかし、コンピュータで文章を書く以上、同時にこなさなければならないことでもある。

そしてやはりもちろん、両方を同時にこなすのは難しい。
自然言語を書きつつ、ソフトウェアのチューニングもするのは困難なことだ。

そして正直なことを言えば、文章を書くときにソフトウェアのことをあまり気にしたくないというのが、
文章を書く人間としての率直な感想である。

もちろん、まったく気にしたくない、ということではない。
多少ソフトウェアのチューニングをしてでも、きれいなレイアウトにできるのならそうしたくもある。
ただ文章を1段落書くごとに、 \<p> 要素あるいはそれに相当するものを毎回書くのはしんどい。

Markdown の構文はかなり軽量で、文章を書く人間としては魅力的だ。
ただ不満点もある。たとえば足りない機能を追加する方法がないこと。
例を述べるなら、 \<sup> や \<sub> のようなことをしたいだけなのにタグを書くはめになる。
Markdown は HTML をそのまま書けるのでその気になればどんなものでも書けるが、
量が多くなってくるとあっというまにしんどくなる。

もうひとつは、シリアライズフォーマットではないこと。
これはどういうことか？　たとえば Markdown でゲームのシナリオを書こうとしても、
プログラム側では Markdown ではなく JSON として入力してほしいのであり、
そのギャップを埋めるのが難しい。

拡張性の問題に関しては、じつはシリアライズフォーマットにすればほとんど解決する。
シリアライズフォーマットなら JSON をトラバースして強引になんとかするのも難しくない。
Markdown でも sed で置換するだけで簡単な拡張構文を用意することはできそうだが、そう単純なことではない。
コードブロックのなかは置換したくないなどの要求は常に発生する。

なので結論としては、 Markdown くらい軽量に書けるシリアライズフォーマットがほしい、
というのがわたしの解答なのだ。

#h3 Anne について

上記のような背景からわたしは Anne という言語を設計し、
その Anne でこのブログを書いている。

Anne はシリアライズフォーマットなので、とくにこれといって用途が限定されているわけではない。
ただ、軽量マークアップ言語としても使えるというだけのことである。

Anne の仕様については、 [#a(href=../../anne) Anne のページ] を参照してほしい。

もしこのページのコードを読みたければ、
[#a(href=https://github.com/bydriv/bydriv.github.io/blob/master/blog/hello-world/index.anne) https://github.com/bydriv/bydriv.github.io/blob/master/blog/hello-world/index.anne] で読むことができる。
このページ自体が実際どういう JSON になるのかは、
[#a(href=index.json) index.json] を見ればわかると思う。

このブログではこの記事を書くのに使っている記法について説明する。

まず、ヘッダについては

#pre <<CODE
#h2 Anne でブログを書くことにした

#h3 Anne について
CODE

のように [#code #h2 タイトル] と書く。
ここで [#code #h2] と [#code #h3] のあいだには空行をいれなくてはならない。

上記のコードは、

#pre <<CODE
<h2>Anne でブログを書くことにした</h2>
<h3>Anne について</h3>
CODE

のようになる。

段落は空行で区切る。たとえば。

#pre <<CODE
なんか。
いろいろあって Anne というシリアライズフォーマット兼軽量マークアップ言語でブログを書くことにした。

今日はその話。
CODE

と書けば、

#pre <<CODE
<p>
なんか。
いろいろあって Anne というシリアライズフォーマット兼軽量マークアップ言語でブログを書くことにした。
</p>

<p>
今日はその話。
</p>
CODE

のようになる。

コードブロックは

#pre <<CODE'
#pre <<CODE
<h2>Anne でブログを書くことにした</h2>
<h3>Anne について</h3>
CODE
CODE'

のように書く。

コードブロック自体をコードとして記述することも簡単:

#pre <<CODE''
#pre <<CODE'
#pre <<CODE
<h2>Anne でブログを書くことにした</h2>
<h3>Anne について</h3>
CODE
CODE'
CODE''

ここで [#code <|<<CODE|] という部分は対応していればよく、 [#code '] をつけるという規則があるわけではない。
だから

#pre <<CODE
#pre <<FOO
#pre <<BAR
<h2>Anne でブログを書くことにした</h2>
<h3>Anne について</h3>
BAR
FOO
CODE

としてもよい。

インラインのコードは

#pre <<CODE
[#code <|<<CODE|]
CODE

のように書く。 [#code |] の部分は対応さえしていれば、 ([#code \<] 以外の) 任意の1文字が使える。
だから

#pre <<CODE
[#code </<<CODE/]
[#code <d<<CODEd]
CODE

のようにしてもよい。

d の部分にはすくなくとも ASCII の印字可能文字が使える(これは仕様である)。
Unicode の文字が使えるかどうかは未定義である。
現在の実装では使えるが、あまり使わないでほしい。

リンクや画像などで属性を書きたい場合、

#pre <<CODE
[#a(href=../../anne) Anne のページ]
[#img(src=/img/gallery0000.png)]
CODE

というふうに書く。

入れ子の構造を書くのも簡単。

#pre <<CODE
#div(class=window)
  [#div(class=header) かつてそこにはそれは大きな街があったのです]
  [#div(class=content) [#img(src=/img/gallery0000.png)]]
CODE

エスケープしなければならない文字は4種類あり、

#ul
[#li [#code \<]]
[#li [#code \[]]
[#li [#code \\]]
[#li [#code \]]]

である。これらはそれぞれ、

#ul
[#li [#code \\\<]]
[#li [#code \\\[]]
[#li [#code \\\\]]
[#li [#code \\\]]]

と書く必要がある。もしくは、

#ul
[#li [#code <!<|<|!]]
[#li [#code <!<|[|!]]
[#li [#code <!<|\|!]]
[#li [#code <!<|]|!]]

と書いてもよい。 [#code \\] が直後の1文字しかエスケープできないのに対し、
[#code <!<|x|!] の記法ではもっと長い文字列もエスケープできる。
たとえば、正規表現のように [#code \\] が頻出する文章では、こちらのほうが便利である。

箇条書きやテーブルは、少々複雑ではあるが

#pre <<CODE
#ul
[#li [#code \<]]
[#li [#code \[]]
[#li [#code \\]]
[#li [#code \]]]
CODE

とか

#pre <<CODE
#table
[#tr [#td [#em anne]     ] [#td ::=] [#td [#em (* empty *)]                        ]]
[#tr [#td                ] [#td   |] [#td [#em document]                           ]]
[#tr [#td [#em document] ] [#td ::=] [#td [#em paragraph]                          ]]
[#tr [#td                ] [#td   |] [#td [#em paragraph] [#b BLANK] [#em document]]]
[#tr [#td [#em paragraph]] [#td ::=] [#td [#em datum]                              ]]
[#tr [#td                ] [#td   |] [#td [#em datum] [#em paragraph]              ]]
[#tr [#td [#em data]     ] [#td ::=] [#td [#em (* empty *)]                        ]]
[#tr [#td                ] [#td   |] [#td [#em datum] [#em data]                   ]]
[#tr [#td [#em datum]    ] [#td ::=] [#td [#em atom]                               ]]
[#tr [#td                ] [#td   |] [#td [#em list]                               ]]
[#tr [#td [#em atom]     ] [#td ::=] [#td [#b TEXT]                                ]]
[#tr [#td                ] [#td   |] [#td [#b RAW1]                                ]]
[#tr [#td                ] [#td   |] [#td [#b RAWN]                                ]]
[#tr [#td [#em list]     ] [#td ::=] [#td [#code \[] [#em data] [#code \]]         ]]
CODE

というふうに書ける。
表は Anne の文法を表しており、表示はつぎのとおり。

#table
[#tr [#td [#em anne]     ] [#td ::=] [#td [#em (* empty *)]                        ]]
[#tr [#td                ] [#td   |] [#td [#em document]                           ]]
[#tr [#td [#em document] ] [#td ::=] [#td [#em paragraph]                          ]]
[#tr [#td                ] [#td   |] [#td [#em paragraph] [#b BLANK] [#em document]]]
[#tr [#td [#em paragraph]] [#td ::=] [#td [#em datum]                              ]]
[#tr [#td                ] [#td   |] [#td [#em datum] [#em paragraph]              ]]
[#tr [#td [#em data]     ] [#td ::=] [#td [#em (* empty *)]                        ]]
[#tr [#td                ] [#td   |] [#td [#em datum] [#em data]                   ]]
[#tr [#td [#em datum]    ] [#td ::=] [#td [#em atom]                               ]]
[#tr [#td                ] [#td   |] [#td [#em list]                               ]]
[#tr [#td [#em atom]     ] [#td ::=] [#td [#b TEXT]                                ]]
[#tr [#td                ] [#td   |] [#td [#b RAW1]                                ]]
[#tr [#td                ] [#td   |] [#td [#b RAWN]                                ]]
[#tr [#td [#em list]     ] [#td ::=] [#td [#code \[] [#em data] [#code \]]         ]]

#h3 技術的詳細

#h4 HsYACC と HsLex

以前 HsYACC と HsLex という構文解析器生成系と字句解析器生成系を開発した。
Anne はそれを使ってつくってみた。

#ul
[#li [#a(href=https://github.com/bydriv/bydriv.github.io/blob/master/anne/Data/Anne/Parsing.hsy) https://github.com/bydriv/bydriv.github.io/blob/master/anne/Data/Anne/Parsing.hsy]]
[#li [#a(href=https://github.com/bydriv/bydriv.github.io/blob/master/anne/Data/Anne/Lexing.hsl) https://github.com/bydriv/bydriv.github.io/blob/master/anne/Data/Anne/Lexing.hsl]]

過去のわたしすごいな(えっへん)。

#h4 Data.Anne

Haskell で [#code Data.Anne] というモジュールを用意しておりこれは Anne を JSON に変換せずそのまま処理できる。

#pre <<CODE
import qualified Data.Anne as Anne

main :: IO ()
main = do
  s <- getContents
  print $ Anne.parse s
CODE

のように使う。

#h4 anne

Anne を JSON に変換するツール。

#pre <<CODE
$ git clone git://github.com/bydriv/bydriv.github.io.git
$ cd anne
$ pwd
path/to/bydriv.github.io/anne
$ stack build
$ stack install
$ cat << EOF > hello.anne
hello world
EOF
$ cat hello.anne | anne # minify して出力される
{"type":"document","value":[{"type":"paragraph","value":[{"type":"text","value":"hello world\n"}]}]}
$ cat hello.anne | anne | jq . # 整形したい場合
{
  "type": "document",
  "value": [
    {
      "type": "paragraph",
      "value": [
        {
          "type": "text",
          "value": "hello world\n"
        }
      ]
    }
  ]
}
CODE

#h4 Shirley

Anne をトラバースする Shirley というライブラリを用意してある。

[#a(href=https://github.com/bydriv/bydriv.github.io/blob/master/anne/lib/shirley.rb) https://github.com/bydriv/bydriv.github.io/blob/master/anne/lib/shirley.rb]

#h4 HTML Shirley

Shirley を使って Anne を HTML に変換するツール。

[#a(href=https://github.com/bydriv/bydriv.github.io/blob/master/anne/shirley/html.rb) https://github.com/bydriv/bydriv.github.io/blob/master/anne/shirley/html.rb]

使いかた:

#pre <<CODE
$ pwd
path/to/bydriv.github.io/anne
$ cat hello.anne | anne | ruby shirley/html.rb
<p>hello world
</p>
CODE

#h3 より便利にする

Syntax Highlighting などもできたら便利かもしれない。
するなら Shirley で Pygments などを呼ぶようにすればいい。

もちろん、 MathJax などを使うようにすることも簡単である。
Anne 自体は単なるシリアライズフォーマットなので、いくらでも拡張できる。

#h3 ブログシステム

このブログは [#code blog/%/index.anne] を用意して [#code make] すればそれだけですべてが済むようになっている。
(正確にはブログ以外のものもすべて用意される)。

以前のブログと比べると格段に楽になったと思う。
Anne の構文もかなり軽いし、ビルドも楽だし。

とはいえこういうのはあんま続かないと相場が決まっている(ほんまか)。

n 度めの正直になるか、 n の舞になるか。

できれば続けたいな。

まあとりあえずやってみるという感じです。
