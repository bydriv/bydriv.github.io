#div(class="kludge" style="margin: 1em; text-align: center; font-size: 3em;")
KLUDGE

#h2 Kludge というフォントをつくった

[#span(class="kludge") KLUDGE] というフォントをつくったので紹介する。
まずはサンプル:

[#span(class="kludge") THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG]

アルファベット順:

[#span(class="kludge") ABCDEFGHIJKLMNOPQRSTUVWXYZ]

リポジトリ: [#a(href=https://github.com/bydriv/formalspeak) https://github.com/bydriv/formalspeak]

Kludge は現在アルファベット大文字のみの収録で、小文字や記号類はなし。
まだまだ ASCII すらサポートできていない制限の多い段階だけど、こういうのはあんまだらだら続けるより、
多少気になるところがあってもいったん区切りをつけてしまったほうが
いいと相場が決まっている (わたしのなかで)。
なので、いったんアルファ版ということでリリースする。

#h3 いろいろな単語を描画してみる

せっかくフォントをつくったので、いろいろ単語を書いて遊んでみる。

[#span(class="kludge") HIJACK]

[#span(class="kludge") KLUDGE]

[#span(class="kludge") FORMALSPEAK]

[#span(class="kludge") LUZ BETHEL]

[#span(class="kludge") MINAGAWA TEIRI]

#h3 Kludge の制作過程

Kludge を制作するのに使用したツールなどを書く。

#h4 SVG Font to OTF

基本的には、 SVG フォントを書いてそれを OTF に変換するようにして制作している。

SVG フォントっていうのは、 ↓ みたいな XML ファイル。

#pre <<CODE
<?xml version="1.0" standalone="yes"?>
<svg
    version="1.1"
    xmlns="http://www.w3.org/2000/svg">
  <defs>
    <font
        id="kludge"
        horiz-origin-x="3pt"
        horiz-origin-y="0pt">
      <font-face
          font-family="Kludge"
          font-weight="normal"
          font-style="normal"
          units-per-em="100pt"
          ascent="103pt"
          descent="-3pt" />
      <glyph
          glyph-name="SP"
          unicode="&#x0020;"
          horiz-adv-x="100pt"
          d="M 0 0 Z" />
      <!-- = 124pt + 9pt -->
      <glyph
          glyph-name="A"
          unicode="A"
          horiz-adv-x="133"
          d="M 80.464844 52.902344 L 59.066406 91.085938 L 66.277344 103.582031 L 123.988281 3.625 L 109.558594 3.625 L 87.4375 41.945312 L 21.0625 3.625 L 8.570312 3.625 L 14.816406 14.445312 Z M 80.464844 52.902344 " />
      <!--      :       -->
      <!--     省略     -->
      <!--      :       -->
      <!-- = 96pt + 9pt -->
      <glyph
          glyph-name="Z"
          unicode="Z"
          horiz-adv-x="105"
          d="M 8.671875 103.582031 L 8.671875 91.085938 L 78.464844 91.085938 L 8.671875 16.117188 L 8.671875 3.625 L 96.136719 3.625 L 96.136719 16.117188 L 26.34375 16.117188 L 96.136719 91.085938 L 96.136719 103.582031 Z M 8.671875 103.582031 " />
      <hkern g1="A" g2="C" k="14.5298pt" />
      <!--      :       -->
      <!--     省略     -->
      <!--      :       -->
      <hkern g1="Z" g2="S" k="4.7025pt" />
    </font>
  </defs>
</svg>
CODE

これを [#code kludge.svg] とかの名前で保存して

#pre <<CODE
$ fontforge -lang=ff -c 'Open($1); Generate($2);' kludge.svg kludge.otf
CODE

というコマンドで OTF ファイルを生成できる。
TTF とか WOFF とかも同様にして生成できるけど、わたしはいまは OTF のみで配布している。

理屈的にはこれさえできれば任意のフォントがメモ帳でも開発できるんだけど、なかなか難しいところもあったりする。

#pre <<CODE
<glyph
    glyph-name="A"
    unicode="A"
    horiz-adv-x="133"
    d="M 80.464844 52.902344 L 59.066406 91.085938 L 66.277344 103.582031 L 123.988281 3.625 L 109.558594 3.625 L 87.4375 41.945312 L 21.0625 3.625 L 8.570312 3.625 L 14.816406 14.445312 Z M 80.464844 52.902344 " />
CODE

とかの [#code d=".."] って部分には SVG の path と同じ構文のコマンドを書くんだけど、これを手書きするのは可能だけどしんどい。

そこで、この部分だけ Inkscape とかのベクタツールで書くこともできる。

わたしの場合、 LuaTeX で tikz を使って PDF を生成し、それを SVG に変換して書いてる。
具体的には

#pre <<CODE
$ cat capital-a.tex
\documentclass{standalone}%
\usepackage{tikz}%
\begin{document}%
\begin{tikzpicture}%
  \fill%
  (0.4967cm, -0.0246cm) -- (-0.2525875cm, 1.3125cm) -- (0, 1.75cm)%
  -- (2.0207cm, -1.75cm) -- (1.515525cm, -1.75cm)%
  -- (0.74085375cm, -0.40821272cm) -- (-1.5832cm, -1.75cm) -- (-2.0207cm, -1.75cm)%
  -- (-1.80195cm, -1.3711cm) -- cycle;%
\end{tikzpicture}%
\end{document}%
$ lualatex capital-a.tex
$ pdfcrop capital-a.pdf
$ pdfflip capital-a-crop.pdf
$ pdf180 capital-a-crop-flipped.pdf
$ H=$(identify -format "%H" capital-a-crop-flipped-rotated180.pdf)
$ T=$(expr \( 106 - $H \) / 2)
$ B=$(expr 106 - $H - $T)
$ pdfcrop --margins "9 $$B 0 $$T" capital-a-crop-flipped-rotated180.pdf capital-a-crop-flipped-rotated180-baseline.pdf
$ pdf2svg capital-a-crop-flipped-rotated180-baseline.pdf capital-a.svg
$ cat capital-a.svg
<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="124pt" height="107pt" viewBox="0 0 124 107" version="1.1">
<defs>
<clipPath id="clip1">
  <path d="M 9 4 L 123.988281 4 L 123.988281 103.582031 L 9 103.582031 Z M 9 4 "/>
</clipPath>
</defs>
<g id="surface1">
<g clip-path="url(#clip1)" clip-rule="nonzero">
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;" d="M 80.464844 52.902344 L 59.066406 91.085938 L 66.277344 103.582031 L 123.988281 3.625 L 109.558594 3.625 L 87.4375 41.945312 L 21.0625 3.625 L 8.570312 3.625 L 14.816406 14.445312 Z M 80.464844 52.902344 "/>
</g>
</g>
</svg>
CODE

こんな感じに SVG を生成して、 [#code d="M 80.464844 52.902344 L 59.066406 91.085938 L 66.277344 103.582031 L 123.988281 3.625 L 109.558594 3.625 L 87.4375 41.945312 L 21.0625 3.625 L 8.570312 3.625 L 14.816406 14.445312 Z M 80.464844 52.902344 "] という部分を正規表現でとりだして、 ERB のテンプレートで [#code kludge.svg] を生成して、最終的に fontforge で OTF に変換する感じ。

ちなみに ERB のテンプレートはだいたいこんな感じ:

#pre <<CODE
<?xml version="1.0" standalone="yes"?>
<svg
    version="1.1"
    xmlns="http://www.w3.org/2000/svg">
  <defs>
    <font
        id="kludge"
        horiz-origin-x="3pt"
        horiz-origin-y="0pt">
      <font-face
          font-family="Kludge"
          font-weight="normal"
          font-style="normal"
          units-per-em="100pt"
          ascent="103pt"
          descent="-3pt" />
      <glyph
          glyph-name="SP"
          unicode="&#x0020;"
          horiz-adv-x="100pt"
          d="M 0 0 Z" />
<%
        ('a'..'z').each do |x|
          s = File.read("capital-#{x}.svg")
          s =~ /width="((?:\d|\.)*)pt"/
          w = $1.to_i
          horiz_adv_x = w + 9
%>      <!-- = <%= w %>pt + 9pt -->
      <glyph
          glyph-name="<%= x.upcase %>"
          unicode="<%= x.upcase %>"
          horiz-adv-x="<%= horiz_adv_x %>"
          d="<%= s.scan(/<path style="([^"]*)" d="([^"]*)"\/>/).map {|m| m[1]}.join %>" />
<%
        end
%>      <hkern g1="A" g2="C" k="14.5298pt" />
      <!--      :       -->
      <!--     省略     -->
      <!--      :       -->
      <hkern g1="Z" g2="S" k="4.7025pt" />
    </font>
  </defs>
</svg>
CODE

ちょっとまわりくどいことしてるけど、 GUI でやるよりビルドが自動化できて楽 (ほんまか)。

まあともかくそんな感じにフォントをつくってます。

#h3 おまけ: Formalspeak について

Kludge のリポジトリの名前がなんで formalspeak なの？
って話。

あんまり詳しく書くつもりはないんだけど、 Formalspeak という英語のサブセットみたいな形式言語を
考えていて、 Kludge は (もちろんそれ専用ではないにしろ) Formalspeak で使われることを
意識したデザインになっている。

Kludge の名前を Formalspeak にしようとも思ったんだけど、 Formalspeak はあくまで文法や語彙の
体系であって、グリフのデザインや発音みたいな領域のものに Formalspeak って名前をつけるのは
ちょっと違うかなって。

で、 Formalspeak 関係の成果物は、今後 Kludge 以外もこのリポジトリに追加していくつもり。

わたしはあんまリポジトリを細かく分けたくない派で、 Kludge というフォント専用のリポジトリよりは
Formalspeak というもうすこし大きめのカテゴリのディレクトリにいろいろ置くのが好きみたいな。

そんな感じ。
