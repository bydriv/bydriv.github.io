#h2 データとプログラムの話

ソフトウェアというのは一般的に、大別すればデータとプログラムのふたつの要素から構成される。
データというのはたとえば画像や文章で、プログラムというのは説明するまでもないことかもしれないが、
それを処理する手続きや関数のことである。

一般論として、プログラムよりデータのほうが扱うのが簡単な対象であると思う。
たとえば文字列が等しいかどうかを判定することは、関数が等しいかどうかを判定するよりはるかに簡単だ。

プログラムはデータの一種である、という立場もあるし、実際コンピュータはそういうふうに設計されている。
しかし実際的な観点からは、プログラムとデータはきっちり分けてしまったほうが話が簡単になる。

とはいえプログラムとデータは true か false できっちり分離できるというものではなくて、
100% プログラムなものもあれば 75% くらいデータだが 25% くらいプログラムであるものなど、いろいろあると思う。
たとえば PostScript がデータなのかプログラムなのかはっきり答えられるひとは少ないと思う。

そもそもプログラムもデータとして扱える以上、プログラムとデータは直和型みたいにきっちり分離できるものできるものではないことは当然だ。
じゃあなにがプログラムとデータと分けているのかというと、
個人的には[#b 高機能さ]だと思っている。
高機能であればあるほどプログラムとしての色が強く、
低機能であればあるほどデータであるといえる。

低機能であることは悪いことではなく、むしろほかのプログラムからの扱いやすさという観点で見れば、
低機能なほうが都合がよいことが多い。
根本的には、この高機能さがプログラムとデータを分けるもので、
データは低機能ゆえ、扱いやすいのだと思っている。

たとえば数値や文字列はそれだけではなんの計算もできない、いわば単なるバイト列であって非常に低機能なものだ。
しかし数値や文字列を扱えないプログラミング言語というのはなかなかない。
どんな単純な言語でも、数値くらいは扱えるものだ。
それは数値というものがプログラミング言語に組みこむことが非常に容易なくらい低機能なものだからだ。

配列やリスト、集合、ハッシュテーブルをもつ言語も多いが、すべてではない。
正規表現はデータかプログラムか微妙な存在で、言語に組みこむのも、そんなに簡単なことではない。
これは数値に比べると高機能な構造なので、それだけ扱いにくいことを意味している。

チューリング完全なプログラミング言語はコンピュータで可能なすべてのことができるはずなのでその意味で高機能ともいえそうだが、
Brainfuck と Haskell のどちらが高機能かと言われれば、やはり Haskell だろうしそんなに単純なものさしで測れることではないと思う。
すくなくとも、 Brainfuck の処理系を実装するほうが Haskell の処理系を実装するよりはるかに簡単という意味で、
Brainfuck はよりデータに近い存在なのだろうと思う。

個人的には、データのほうがプログラムよりはるかに扱いやすい存在だし、わずかなプログラムでたくさんのデータを処理できるという意味で、プログラムよりデータを増やすほうがいいんじゃないかと思っている（当然のことだが）。

ともかく、プログラムよりデータを増やしていきたいとか、そういうことを思っているのが最近です（おちがない）。
