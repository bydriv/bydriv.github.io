#h2 Effective Makefile Programming

Makefile は実用的なプログラミング言語である。
ここでは Makefile をもちいた実用プログラミング技法（？）を提案しよう。

#h3 Introduction

趣味・仕事問わず、プログラマならしばしば簡単なスクリプトを書く必要に迫られることがあると思う。
それは往々にしてプロダクションコードとは別の開発用の小さなツールである。
そういったツールを書くとき、どのような言語を選択するのか？
シェルスクリプト, Python, あるいはひとによっては、そのような場合にこそ Haskell を使うかもしれない。
わたしにとっては、その選択肢のひとつに Makefile がある。
これは半分は冗談だし、半分はマジメな話である。

辞書や配列といった構造を使う必要があるなら、シェルスクリプトより Python のほうが明らかに楽である。
シェルスクリプトは外部コマンドを呼びやすいというメリットがあり、
ただ単にいくつかのコマンドをまとめる程度のほんとうに単純なスクリプトの場合、
Python よりシェルスクリプトのほうが平易になりやすいと思う。

ただシェルスクリプトでどうしてもつらい場面がひとつあり、それはオプションやサブコマンドを扱いたい場面である。
辞書や配列を使うほど複雑なことはしないが、
必要に応じてパラメタライズしたいという場面はよくあり、
その場合にシェルスクリプトにはそのような機能が致命的に欠けている。

つまり基本的にはシェルスクリプトを書きたいのだが、
部分的にパラメタライズやサブコマンドといった場合、
じつは Makefile の機能は非常にスクリプト言語として便利なのである。

#h3 Hello world

なにはともあれ Hello world である。

#pre <<CODE
#!/usr/bin/make -f
.PHONY: main
main:
	@echo hello world
CODE

たったの 4 行！
実用的である。

使用法は、上記のファイルを [#code <|hello.mk|] というファイルに保存したとすれば、

#pre <<CODE
$ ./hello.mk
hello world
CODE

たったこれだけである。

#h3 Options

オプションを受けとるのも簡単。
なんとデフォルト値まで定義できる。

#pre <<CODE
#!/usr/bin/make -f
X:=defvalX
Y:=defvalY
Z:=defvalZ
.PHONY: main
main:
	@echo X="$(X)"
	@echo Y="$(Y)"
	@echo Z="$(Z)"
CODE

#pre <<CODE
$ ./opt.mk
X=defvalX
Y=defvalY
Z=defvalZ
$ ./opt.mk X=aaa
X=aaa
Y=defvalY
Z=defvalZ
CODE

逆に引数を必須にしたければ、 [#code <|ifndef|] を使えばいい。

#pre <<CODE
#!/usr/bin/make -f
Y:=defvalY
Z:=defvalZ
.PHONY: main
main:
ifndef X
	@echo X is required
	@exit 1
endif
	@echo X="$(X)"
	@echo Y="$(Y)"
	@echo Z="$(Z)"
CODE

#pre <<CODE
$ ./req.mk
X is required
req.mk:7: recipe for target 'main' failed
make: *** [main] Error 1
$ ./req.mk X=aaa
X=aaa
Y=defvalY
Z=defvalZ
$ ./req.mk X=aaa Y=bbb
X=aaa
Y=bbb
Z=defvalZ
CODE

もちろんこれでは [#code <|--foo|] みたいな通常のスタイルのオプションは扱えないのだが、
ただ単純にパラメタライズしたいという要件は満たしている。

#h3 Subcommands

サブコマンドを定義するのも簡単である。

#pre <<CODE
#!/usr/bin/make -f
.PHONY: main
main:
	@echo hello world
.PHONY: cmd1
cmd1:
	@echo subcommand 1
.PHONY: cmd2
cmd2:
	@echo subcommand 2
CODE

実行はこう。

#pre <<CODE
$ ./subcmd.mk
hello world
$ ./subcmd.mk cmd1
subcommand 1
$ ./subcmd.mk cmd2
subcommand 2
CODE

#h3 Conclusion

要するにシェルスクリプトを書きたくなったら代わりに Makefile を書けば
オプションのパースやサブコマンドの定義を省略できてハッピーだねということが言いたかった。
あと Makefile は基本的にどの環境にもあるのもうれしい。
もちろんポータブルに書くのはかなり難しいのだが……。
