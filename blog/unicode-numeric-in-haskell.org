#+SETUPFILE: ../setup.org
#+OPTIONS: ^:nil
#+TITLE: Haskell における Unicode 数値について

#+BEGIN_LOCATION
@@html:https://<a href="/">bydriv.github.io</a>/<a href="/blog">blog</a>/<strong>unicode-numeric-in-haskell.html</strong>@@
#+END_LOCATION

#+BEGIN_CREATED_AT
created at @@html:<time datetime="2018-07-22">2018-07-22</time>@@
#+END_CREATED_AT

#+BEGIN_UPDATED_AT
updated at @@html:<time datetime="2018-07-22">2018-07-22</time>@@
#+END_UPDATED_AT

なんか数日まえ， C言語では全角数字が識別子に使える，みたいな話が Twitter の TL に流れていた．
わたしは以前から Haskell 2010 を読んで Haskell の数値には Unicode で数字として定義されているもの
(GeneralCategory で Nd, Number, Decimal Digit と呼ばれるもの) ならば使えるという
ことを知っていたので， Haskell なら全角数字も数値扱いになるよ，みたいなネタを言おうとして，
GHC で試してみた．しかし，うまくいかない．

#+BEGIN_EXAMPLE
$ ghci
Prelude> ４２

<interactive>:1:1: error: lexical error at character '\65300'
#+END_EXAMPLE

あるぇ？　全角数字って Unicode でも数字扱いじゃなかったっけ？
と思ったら，やっぱり数字を意味する Nd に分類されているし， Numeric_Value プロパティも定義されているではないか．
これはおかしい． Haskell の仕様では，全角数字で ４２ と書いても数字扱いされなければならない．
わたしの Haskell の仕様の理解がおかしいのか？　と思ってもう一度読んでみたところ，
やはり Unicode の数字も使えるように定義されいてるではないか．
(参照: https://www.haskell.org/onlinereport/haskell2010/haskellch2.html#x7-140002)
引用すると， Haskell の仕様的には

| /ascDigit/ | → | ~1~                       |
|            |   | ~2~                       |
|            |   | :                         |
|            |   | ~9~                       |
| /uniDigit/ | → | any Unicode decimal digit |
| /digit/    | → | /ascDigit/                |
|            |   | /uniDigit/                |
| /integer/  | → | /digit/ { /digit/ }       |

となっている．やはり，数値にも全角数字などが使えるはずである．
なお， { /digit/ } は /digit/ の 0 回以上の繰り返しである．

いや，そもそもエラーメッセージがおかしい．どうやら，字句解析時に弾かれているようだ．
ということは識別子ですらないということになる． もし識別子ならば，
Variable not in scope: 1 のようなエラーメッセージが出力されなければならない．
では，どういう状況で １ は使えるのだろうか．まさかとは思って，試してみた．

#+BEGIN_EXAMPLE
Prelude> １９８４年

<interactive>:2:1: error: lexical error at character '\65297'
Prelude> 宇宙世紀００７９

<interactive>:3:1: error: Variable not in scope: 宇宙世紀００７９
Prelude> 銀河鉄道９９９

<interactive>:4:1: error: Variable not in scope: 銀河鉄道９９９
#+END_EXAMPLE

フーム，なるほど． １９８４年はダメで， 宇宙世紀００７９や銀河鉄道９９９は問題なし．
オーケー，つまり通常の識別子に出現する数字と同様に， 全角数字は識別子の先頭にくることができない，

ふむふむ．と，いうことは全角数字は，識別子においてはアルファベットや記号とは区別され，半角数字と同様に扱われるものの，
全角数字を数字に使うことはできない．

と思って GHC の実装を読んでみた． どうやら問題は，
つぎの行である: 

https://github.com/ghc/ghc/blob/b202e7a48401bd8e805a92dcfe5ea059cbd8e41c/compiler/parser/Lexer.x#L139-L142

引用すると

#+BEGIN_EXAMPLE
$ascdigit  = 0-9
$unidigit  = \x03 -- Trick Alex into handling Unicode. See [Unicode in Alex].
$decdigit  = $ascdigit -- for now, should really be $digit (ToDo)
$digit     = [$ascdigit $unidigit]
#+END_EXAMPLE

となっていて，本来 ~$digit~ を使わなければならない箇所で， ~$decdigit~ を使っているのだ．
どうやら ~$digit~ は ４２ のような全角数字も含め Unicode で数字と定義されているものはすべて使える．
しかしながら，数値の字句解析には ~$digit~ ではなくて ~$decdigit~ を使っている．

(ToDo) と書かれていることからも， Haskell の仕様では ４２ が数値に使えることはまちがいなくて，
これは GHC のバグ，ではないかもしれないが，すくなくとも未実装の仕様だろう．

そのうちバグレポしたい．
あと，気力があればなんとかパッチを書いてみたい，と思いました．

ちなみに，実装するには UnicodeData.txt の Numeric_Value プロパティを見ればいい．
(４２ を 42 に変換するため）．

おまけ．つぎの Haskell コードは（仕様的には）合法である．
しかしながら， GHC では未実装の仕様のため，コンパイルすることはできない．

#+BEGIN_EXAMPLE
type The_Answer_to_the_Ultimate_Question_of_Life_the_Universe_and_Everything = Int
answer :: The_Answer_to_the_Ultimate_Question_of_Life_the_Universe_and_Everything
answer = 𝟜𝟚
#+END_EXAMPLE
