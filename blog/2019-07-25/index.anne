#h2 Raspberry Pi 3 B+ で Bare-Metal Hello World 作戦 (1)

#h3 はじめに

最近 (n 週遅れだけど) Raspberry Pi をいじって遊んでいる。
いろいろいじってて、 raspi を使えばけっこうお手軽に自作 OS を実機で動かせて楽しいのでは？
と思い至ったのでその周辺のことを最近調べている。

まだ計画を遂行できたわけではないけど、備忘録も兼ねて、いったんこれまでにしたことをすこしまとめておく。

#h4 Raspbian Install Battle

だいたいここ ([#a(href=https://www.raspberrypi.org/documentation/installation/installing-images/linux.md) https://www.raspberrypi.org/documentation/installation/installing-images/linux.md]) に書いてある通りにすればいい。

まず raspbian のイメージをダウンロードする ([#a(href=https://www.raspberrypi.org/downloads/raspbian/) https://www.raspberrypi.org/downloads/raspbian/])。
イメージは 3 種類ある。

#ul
[#li [#em Raspbian Buster with desktop and recommended software]: Mathematica とか入っているデスクトップ版。 Mathematica が使いたかったので、わたしはこれにした。]
[#li [#em Raspbian Buster with desktop]: Mathematica とかは入っていない、シンプルな感じのデスクトップ版。]
[#li [#em Raspbian Buster Lite]: デスクトップがないバージョン。サーバ構築とか電子工作がしたいなら向いてるかも。]

SD カードを PC に接続して、そのデバイスが [#code /dev/sda] と認識されているとする (このへんは環境依存なので適宜変えること)。以下のコマンドで SD カードにイメージをコピー。

#pre <<CODE
# dd bs=4M if=2019-07-10-raspbian-buster-full.img of=/dev/sda conv=fsync
CODE

そうしたらその SD カードを Raspberry Pi に挿入して電源を ON にすれば起動する。

#h4 Arch Install Battle

Raspberry Pi に Arch はインストールできるのか試してみた。

結果: [#a(href=https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-3) https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-3] の通りにすればできる。

今回も例によって SD カードが [#code /dev/sda] だとする。

#pre <<CODE
# fdisk /dev/sda # o, n, <ENTER>, <ENTER>, +100M, t, c, n, <ENTER>, <ENTER>, <ENTER>, w の順に入力
# mkfs.vfat /dev/sda1
# mkfs.ext4 /dev/sda2
# mkdir boot
# mkdir root
# mount /dev/sda1 boot
# mount /dev/sda2 root
# wget http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-3-latest.tar.gz
# bsdtar -xpf ArchLinuxARM-rpi-3-latest.tar.gz -C root
# sync
# mv root/boot/* boot
# umount boot root
CODE

こんな感じで SD カードをセットアップ。
それができたら SD カードを raspi に挿入して電源 ON.
[#code alarm login:] と 表示されるので、 root/root でログイン。

そのあと初期化コマンドを実行する:

#pre <<CODE
# pacman-key --init
# pacman-key --populate archlinuxarm
CODE

こんな感じでインストールできた。

#h4 Bare-Metal Hello World 作戦

Raspberry Pi で bare-metal なプログラムを書きたい。
Bare-metal というのは OS などがない状態のこと。
OS 自体は OS のうえで動いていないので、 bare-metal なプログラムと言える気がする。

[#a(href=https://s-matyukevich.github.io/raspberry-pi-os/docs/lesson01/rpi-os.html) https://s-matyukevich.github.io/raspberry-pi-os/docs/lesson01/rpi-os.html] が参考になった。

まず、まったくまっさらな状態の SD カードを Raspberry Pi に挿して電源をいれてみた。
BIOS のようなものも表示されず、文字通りうんともすんとも言わない。

この状態からどのようにしてプログラムを動かすようにできるのだろうか。

まず Arch のインストールを参考にして以下のコマンドで SD カードをフォーマット。
Raspberry Pi の boot partition は FAT32 でなければならない。

#pre <<CODE
# fdisk /dev/sda # o, n, <ENTER>, <ENTER>, +100M, t, c, n, <ENTER>, <ENTER>, <ENTER>, w の順に入力
# mkfs.vfat /dev/sda1
# mkfs.ext4 /dev/sda2
# mkdir boot
# mkdir root
# mount /dev/sda1 boot
# mount /dev/sda2 root
CODE

この状態で [#a(href=https://github.com/raspberrypi/firmware/tree/master/boot) https://github.com/raspberrypi/firmware/tree/master/boot] にある [#code bootcode.bin] と [#code start.elf] をダウンロードしてきて、 boot に配置する。

#pre <<CODE
# cd boot
# wget https://github.com/raspberrypi/firmware/blob/master/boot/bootcode.bin?raw=true -O bootcode.bin
# wget https://github.com/raspberrypi/firmware/blob/master/boot/start.elf?raw=true -O start.elf
CODE

これだけでいちおう「うんともすんともいわない」状態ではなくなる。
この SD カードを Raspberry Pi に挿して起動すれば、なんかカラーマップみたいなものが表示されるようになる。

目標はここから hello world と画面に表示することだけど、これがなかなか難しくてまだ達成できていない。

いまわかっていること: [#code kernel7.img] (または [#code kernel8.img] など。 7 とか 8 は armvN の N) と [#code config.txt] というファイルを boot partition に配置する。
[#code config.txt] は

#pre <<CODE
enable_uart=1
CODE

こんな感じのファイル。
で、 [#code kernel7.img] は [#code boot.s] みたいなアセンブリのファイルを gcc でコンパイル、
ld, objcopy で変換すればよいらしい。具体的には [#code boot.s] の内容が

#pre <<CODE
.section ".text.boot"
.globl _start
_start:
        nop
CODE

こんな感じだとして、まずつぎのような [#code linker.ld] というファイルを用意:

#pre <<CODE
SECTIONS
{
  .text.boot : { *(.text.boot) }
}
CODE

これを使って [#code kernel7.img] を生成するには:

#pre <<CODE
$ gcc -c boot.s -o boot.o
$ ld -T linker.ld -o kernel7.elf boot.o
$ objcopy kernel7.elf -O binary kernel7.img
CODE

とする。

あとはこれらのファイルを

#pre <<CODE
# cp kernel7.img boot
# cp config.txt boot
CODE

のようにすればいい。

これでいちおう、 [#code kernel7.img] が実行される……はず。
なのだけど、まだ肝心のプログラムを書くところまではできていない。

なお、クロスコンパイルとか面倒なので今回、これらの作業はすべて Raspbian 上でおこなった。
x86 などほかのアーキテクチャの CPU で開発する場合はクロスコンパイルの環境を構築する必要がある。
クロスコンパイルの環境整えるのはなかなか面倒そうだけど、
それができたら楽かもしれない (とはいえ、 Raspbian 上で開発するほうが楽な気もする)。

このへん楽しいので、今後もたびたび時間を見つけてやってみたいなぁ。

そんな感じ。
