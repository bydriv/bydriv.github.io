#+SETUPFILE: ../setup.org
#+TITLE: 古典論理で →, ⊥ だけで ∧, ∨ を定義する話

#+BEGIN_LOCATION
@@html:https://<a href="/">bydriv.github.io</a>/<a href="/blog">blog</a>/<strong>classical.html</strong>@@
#+END_LOCATION

#+BEGIN_CREATED_AT
created at @@html:<time datetime="2018-08-29">2018-08-29</time>@@
#+END_CREATED_AT

#+BEGIN_UPDATED_AT
updated at @@html:<time datetime="2018-08-29">2018-08-29</time>@@
#+END_UPDATED_AT

体系はどこまで小さくできるだろうか．
わたしがはじめ記号論理を学んだとき，
∧ や ∨ はほかの要素， つまり → に還元できない，
根源的な要素なのかどうかという疑問をもった．
結論からいうと， 直観主義では → だけで ∧ や ∨ を定義することは無理だが，
古典論理なら → と ⊥ だけで ∧ や  ∨ も定義できるということだそうだ．

古典論理で ∧ や ∨ を定義する方法はいろいろあるらしいが，
わたしが参照した現代数理論理学序説という書籍では，
つぎのように定義されている:

- ￢α = α→⊥
- α∧β = ￢(α→￢β)
- α∨β = (α→β)→β
- α⇄β = (α→β)∧(β→α)

これでどうしてきちんと定義できたことになるのだろうか．
真理値表を書いてみることにしよう．
まずは， ￢α から:

| α | α→⊥ |
|---+-----|
| ⊤ | ⊥   |
| ⊥ | ⊤   |

たしかにこれは，否定の定義に望むべく性質だろう．

∧ はすこしややこしい． そこで先に ∨ の真理値表を書いてみよう．

| α | β | α→β | (α→β)→β |
|---+---+-----+---------|
| ⊤ | ⊤ | ⊤   | ⊤       |
| ⊤ | ⊥ | ⊥   | ⊤       |
| ⊥ | ⊤ | ⊤   | ⊤       |
| ⊥ | ⊥ | ⊤   | ⊥       |

たしかに， α または β のすくなくとも一方が真ならば，
全体としても真となり，両方が偽ならば，全体としても偽となる．
これは， ∨ の定義に望むべく性質である．

つぎは ∧　に行こう．

| α | β | ￢β | α→￢β | ￢(α→￢β) |
|---+---+-----+-------+-----------|
| ⊤ | ⊤ | ⊥   | ⊥     | ⊤         |
| ⊤ | ⊥ | ⊤   | ⊤     | ⊥         |
| ⊥ | ⊤ | ⊥   | ⊤     | ⊥         |
| ⊥ | ⊥ | ⊤   | ⊤     | ⊥         |

ふむふむ． α と β の両方が真のとき，
またそのときにかぎり， 全体としても真となる．
これは， ∧ の定義に望むべく性質である．

⇄ は簡単なので省略する．

ところが， これだけではまだ定義として不十分である．
通常は公理として与えられる演算も定義できなければならない．
これらの演算を定義するには， Peirce の法則（すなわち排中律）が必要である．

証明を書くこともできるが， HTML で証明図を書くのはたいへんなので許してほしい．
とりあえず， 同等のものがつぎのプログラムである:
https://github.com/wejournal/lamb/blob/987b1ef642e076b07dbd76c9aaf4773adf117107/examples/classical.lam

Peirce の法則を call/cc と考えると， Scheme ならこれを実行するプログラムが書ける:
https://gist.github.com/bydriv/699255226b85f37c2aa6c5c6de4206bb

ところで，直観主義では → と ⊥ で ∧ や ∨ が定義できないので，
∧ や ∨ をもたない直観主義命題論理は，
直観主義命題論理の {→, ⊥}-断片というらしい．
さらに ⊥ も含まない論理は， 含意断片というらしい．
含意というのは， → のことである．

先ほどの Lamb における公理 ~peirce~ をとりのぞくと直観主義命題論理の
{→, ⊥}-断片となる．
さらに命題定数 ~false~ と 公理 ~absurd~ をとりのぞくと含意断片となる．
もし，タプルやバリアントを言語に加えれば最小論理となるらしい
(最小論理は ~false~ や ~absurd~ は含まないが，
∧ や ∨ は含む論理)．

なお， church encoding で組や和を定義する方法は，
不要な型変数が陽に現れてしまうので ∧ や ∨ を定義できたことにはならない．
(ということなのだろうか)． System F なら型変数が現れないように定義できるので OK ，ということらしい．

なので Lamb は正確にいえば直観主義命題論理というより， 含意断片論理，
ということになるのだろうか．
