#!/usr/bin/runhaskell

escape :: String -> String
escape [] = []
escape ('"':s) = '\\' : '"' : escape s
escape ('\\':s) = '\\' : '\\' : escape s
escape ('/':s) = '\\' : '/' : escape s
escape ('\b':s) = '\\' : 'b' : escape s
escape ('\f':s) = '\\' : 'f' : escape s
escape ('\n':s) = '\\' : 'n' : escape s
escape ('\r':s) = '\\' : 'r' : escape s
escape ('\t':s) = '\\' : 't' : escape s
escape (c:s) = c : escape s

dumpText :: Bool -> String -> IO Bool
dumpText k t = do
  let t' = dropWhile (== '\n') t

  if null t' then
    return k
  else do
    if k then
      putStr ",\""
    else
      putStr "\""
    putStr (escape (reverse t'))
    putStr "\""
    return True

text :: Bool -> String -> String -> IO ()
text k t [] = do
  dumpText k t
  return ()
text k t ('[':s) = do
  k' <- dumpText k t

  if k' then
    putStr ",["
  else
    putStr " ["

  text False [] s
text k t (']':s) = do
  dumpText k t
  putStr "]"
  text True [] s
text k t ('\n':'\n':s) = do
  k' <- dumpText k t
  text k' [] (dropWhile (== '\n') s)
text k t ('\\':'n':s) = do
  text k ('\n':t) s
text k t ('\\':c:s) = do
  text k (c:t) s
text k t (c:s) = do
  text k (c:t) s

main :: IO ()
main = do
  putStr "["
  getContents >>= text False []
  putStr "]\n"
