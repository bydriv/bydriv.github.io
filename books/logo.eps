%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.41.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 115 185
%%HiResBoundingBox: 0 0 114.98 184.255
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 114.98 184.255 re
W
q
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
[1 0 0 1 0.797 0.399] cm
q
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
0.3985 w
q
q
0.79701 w
63.38347 176.77077 m
63.38347 180.4655 60.38837 183.46062 56.69363 183.46062 c
52.99889 183.46062 50.00378 180.4655 50.00378 176.77077 c
50.00378 173.07603 52.99889 170.08093 56.69363 170.08093 c
60.38837 170.08093 63.38347 173.07603 63.38347 176.77077 c
h
S
Q
q
0.79701 w
73.7017 85.04045 m
73.7017 94.43388 66.08705 102.04854 56.69363 102.04854 c
47.3002 102.04854 39.68555 94.43388 39.68555 85.04045 c
39.68555 75.64703 47.3002 68.03238 56.69363 68.03238 c
66.08705 68.03238 73.7017 75.64703 73.7017 85.04045 c
h
S
Q
q
0.79701 w
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
64.58537 103.24763 m
74.62636 98.89555 79.2529 87.1897 74.9008 77.14871 c
70.54872 67.10773 58.84286 62.48119 48.80188 66.83327 c
47.67651 64.2339 l
59.15054 59.2607 72.52698 64.5493 77.50018 76.02332 c
82.47339 87.49734 77.18478 100.8738 65.71075 105.847 c
64.58537 103.24763 l
h
f
64.58537 103.24763 m
74.62636 98.89555 79.2529 87.1897 74.9008 77.14871 c
70.54872 67.10773 58.84286 62.48119 48.80188 66.83327 c
47.67651 64.2339 l
59.15054 59.2607 72.52698 64.5493 77.50018 76.02332 c
82.47339 87.49734 77.18478 100.8738 65.71075 105.847 c
64.58537 103.24763 l
h
S
Q
q
0.79701 w
64.58537 103.24763 m
63.45718 100.64539 l
S
Q
q
0.79701 w
48.80188 66.83327 m
49.93007 69.43552 l
S
Q
q
0.79701 w
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
59.52829 59.5283 m
59.52829 61.09387 58.25919 62.36298 56.69363 62.36298 c
55.12807 62.36298 53.85896 61.09387 53.85896 59.5283 c
53.85896 57.96275 55.12807 56.69365 56.69363 56.69365 c
58.25919 56.69365 59.52829 57.96275 59.52829 59.5283 c
h
f
59.52829 59.5283 m
59.52829 61.09387 58.25919 62.36298 56.69363 62.36298 c
55.12807 62.36298 53.85896 61.09387 53.85896 59.5283 c
53.85896 57.96275 55.12807 56.69365 56.69363 56.69365 c
58.25919 56.69365 59.52829 57.96275 59.52829 59.5283 c
h
S
Q
q
0.79701 w
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
56.69363 56.69363 m
52.32188 40.37805 56.69363 30.2708 56.69363 13.3797 c
56.69363 30.2708 61.06537 40.37805 56.69363 56.69363 c
h
f
56.69363 56.69363 m
52.32188 40.37805 56.69363 30.2708 56.69363 13.3797 c
56.69363 30.2708 61.06537 40.37805 56.69363 56.69363 c
h
S
Q
q
0.79701 w
0 0 m
0 113.38728 l
0 144.77945 25.30145 170.08092 56.69363 170.08092 c
S
Q
5.66934 0 m
5.66934 113.38728 l
5.66934 143.1359 27.31134 165.42725 56.69363 170.08092 c
S
11.33871 0 m
11.33871 113.38728 l
11.33871 141.65582 29.80841 161.34534 56.69363 170.08092 c
S
17.00807 0 m
17.00807 113.38728 l
17.00807 140.44429 32.58566 157.79718 56.69363 170.08092 c
S
22.67744 0 m
22.67744 113.38728 l
22.67744 139.09753 35.89351 154.96886 56.69363 170.08092 c
S
q
0.79701 w
28.3468 0 m
28.3468 113.38728 l
28.3468 138.19939 39.1488 152.5361 56.69363 170.08092 c
S
Q
34.01617 0 m
34.01617 113.38728 l
34.01617 137.16125 42.71968 150.84727 56.69363 170.08092 c
S
39.68553 0 m
39.68553 113.38728 l
39.68553 136.4847 46.20753 149.50098 56.69363 170.08092 c
S
45.3549 0 m
45.3549 113.38728 l
45.3549 135.93477 49.72598 148.6368 56.69363 170.08092 c
S
51.02426 0 m
51.02426 113.38728 l
51.02426 135.66946 53.20796 148.0731 56.69363 170.08092 c
S
q
0.79701 w
56.69363 0 m
56.69363 113.38728 l
56.69363 135.49608 56.69363 147.9721 56.69363 170.08092 c
S
Q
62.36299 0 m
62.36299 113.38728 l
62.36299 135.66946 60.17929 148.0731 56.69363 170.08092 c
S
68.03236 0 m
68.03236 113.38728 l
68.03236 135.93477 63.66127 148.6368 56.69363 170.08092 c
S
73.70172 0 m
73.70172 113.38728 l
73.70172 136.4847 67.17972 149.50098 56.69363 170.08092 c
S
79.3711 0 m
79.3711 113.38728 l
79.3711 137.16125 70.66757 150.84727 56.69363 170.08092 c
S
q
0.79701 w
85.04045 0 m
85.04045 113.38728 l
85.04045 138.19939 74.23845 152.5361 56.69363 170.08092 c
S
Q
90.70982 0 m
90.70982 113.38728 l
90.70982 139.09753 77.49374 154.96886 56.69363 170.08092 c
S
96.37918 0 m
96.37918 113.38728 l
96.37918 140.44429 80.80159 157.79718 56.69363 170.08092 c
S
102.04855 0 m
102.04855 113.38728 l
102.04855 141.65582 83.57884 161.34534 56.69363 170.08092 c
S
107.71791 0 m
107.71791 113.38728 l
107.71791 143.1359 86.07591 165.42725 56.69363 170.08092 c
S
q
0.79701 w
113.38728 0 m
113.38728 113.38728 l
113.38728 144.77945 88.0858 170.08092 56.69363 170.08092 c
S
Q
q
1.59404 w
0 113.38728 m
113.38728 113.38728 l
S
Q
q
1.59404 w
0 56.69363 m
113.38728 56.69363 l
S
Q
q
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
0.79701 w
0 0 113.38728 13.3797 re
f
0 0 113.38728 13.3797 re
S
Q
Q
Q
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
