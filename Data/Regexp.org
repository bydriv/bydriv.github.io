#+SETUPFILE: ../setup.org
#+TITLE: Data.Regexp.hs

#+BEGIN_LOCATION
@@html:https://<a href="/">bydriv.github.io</a>/<a href="/Data">Data</a>/<strong>Regexp.html</strong>@@
#+END_LOCATION

#+BEGIN_CREATED_AT
created at @@html:<time datetime="2018-01-16">2018-01-16</time>@@
#+END_CREATED_AT

#+BEGIN_UPDATED_AT
updated at @@html:<time datetime="2018-01-16">2018-01-16</time>@@
#+END_UPDATED_AT

勉強のために簡単な DFA 型の正規表現エンジン実装してみた．
パフォーマンスなどの問題から実用には程遠いものの， 基本的な機能はひととおり揃えている．

基本的な使い方は簡単．

#+BEGIN_EXAMPLE
-- /.*\.hs/ という正規表現
let pat = convertRegexpToDFA (many any >>> string ".hs")
pat =~ "hello.hs" -- True
pat =~ "hello.sml" -- False
#+END_EXAMPLE

正規表現の否定もできる．

#+BEGIN_EXAMPLE
-- /.*\.hs/ という正規表現
let pat = convertRegexpToDFA (not (char 'a'))
pat =~ "a" -- False
pat =~ "b" -- True
pat =~ "abc" -- True
-- これは直観に反するかもしれないが，
-- "a" の否定は "a" を含まない文字列ではなく
-- "a" 以外のすべての文字列である
#+END_EXAMPLE

#+BEGIN_SRC sh :exports results :results html
pygmentize -l haskell -f html Regexp.hs
#+END_SRC
