#!/usr/bin/ruby

require "json"

map = JSON.parse ARGF.read

printf "use super::*;\n"
printf "\n"

def generate_object object
  case object["type"]
  when "maptip"
    printf "        object::Object::Maptip(object::maptip::new(\n"
    printf "          %d,\n", object["x"]
    printf "          %d,\n", object["y"]
    printf "          %d,\n", object["z"]
    printf "          %d,\n", object["width"]
    printf "          %d,\n", object["height"]
    printf "          vec![\n"
    object["rectangles"].each do |rectangle|
      printf "            brownfox::Rectangle::new(%d, %d, %d, %d),\n", rectangle["x"], rectangle["y"], rectangle["width"], rectangle["height"]
    end
    printf "          ],\n"
    printf "          \"%s\".to_string(),\n", object["prefix"]
    printf "          \"%s\".to_string(),\n", object["suffix"]
    printf "        ))\n"
  when "teiri"
    printf "        object::Object::Teiri(object::teiri::new(%d, %d, %d))\n", object["x"], object["y"], object["z"]
  when "npc"
    printf "        object::Object::NPC(object::npc::new(%d, %d, %d, \"%s\".to_string()))\n", object["x"], object["y"], object["z"], object["name"]
  when "drone"
    printf "        object::Object::Drone(object::drone::new(%d, %d, %d, \"%s\".to_string()))\n", object["x"], object["y"], object["z"], object["name"]
  when "animated"
    printf "        object::Object::Animated(object::animated::new(\n"
    printf "          %d,\n", object["i"]
    printf "          vec![\n", object["i"]
    object["objects"].each do |obj|
      generate_object obj
      printf "        ,\n"
    end
    printf "        ])),\n"
  when "transport"
    printf "        object::Object::Transport(object::transport::new(\n"
    printf "          %d,\n", object["from"]["x"]
    printf "          %d,\n", object["from"]["y"]
    printf "          %d,\n", object["from"]["width"]
    printf "          %d,\n", object["from"]["height"]
    printf "          \"%s\".to_string(),\n", object["to"]["map"]
    printf "          %d,\n", object["to"]["x"]
    printf "          %d,\n", object["to"]["y"]
    printf "        ))\n"
  end
end

printf "pub fn new() -> Map { Map {\n"
printf "  templates: vec![\n"

map.each do |name, template|
printf "  (\"%s\".to_string(), MapTemplate {\n", name
printf "    x: %d,\n", template["x"]
printf "    y: %d,\n", template["y"]
printf "    width: %d,\n", template["width"]
printf "    height: %d,\n", template["height"]
printf "    objects: vec![\n"

template["objects"].each do |object|
  printf "      (\n"

  case object["control"]["type"]
  when "player"
    printf "        brownfox::Control::Player(brownfox::Player::new(%d)),\n", object["control"]["i"]
  when "immovable"
    printf "        brownfox::Control::Immovable(brownfox::Immovable::new()),\n"
  when "repeat"
    printf "        brownfox::Control::Repeat(brownfox::Repeat::new(%d, vec![\n", object["control"]["step"]
    object["control"]["inputs"].each do |input|
      printf "        brownfox::Input::new(%f, %f, &vec![\n", input["x"], input["y"]
      input["buttons"].each do |button|
        printf "%s,", button.to_s
      end
      printf "        ]),\n"
    end
    printf "        ])),\n"
  end

  generate_object object["object"]

  printf "      ),\n"
end

printf "    ],\n"
printf "  }),\n", name
end

printf "].into_iter().collect(),\n"
printf "  }\n"
printf "}\n"
